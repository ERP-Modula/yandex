plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'modula.platform.yandex'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

def ensureTokenHasReadPackages() {
    try {
        def proc = "gh auth status".execute()
        proc.waitFor()
        def statusOutput = proc.in.text
        if (!statusOutput.contains("read:packages") && !statusOutput.contains("write:packages")) {
            throw new GradleException("‚ùå GitHub token lacks 'read:packages' scope.\nRun: gh auth refresh --scopes \"read:packages\"")
        }
    } catch (Exception e) {
        logger.warn("Failed to check token scopes via 'gh auth status'", e)
        throw new GradleException("Unable to verify GitHub token. Please run: gh auth refresh --scopes \"read:packages\"")
    }
}

def getGithubToken() {
    def token = System.getenv("GITHUB_TOKEN")
    if (!token) {
        try {
            def proc = "gh auth token".execute()
            proc.waitFor()
            token = proc.in.text.trim()
        } catch (Exception e) {
            logger.warn("Failed to get GitHub token via gh", e)
        }
    }
    if (token) {
        def masked = "${token[0..3]}${'*' * (token.length() - 9)}${token[-5..-1]}"
        println("GitHub token loaded: ${masked}")
    } else {
        println("GitHub token not found.")
    }
    return token ?: ""
}

def getGithubUser() {
    def user = System.getenv("GITHUB_USER")
    if (!user) {
        try {
            def proc = "gh api user --jq .login".execute()
            proc.waitFor()
            user = proc.in.text.trim()
        } catch (Exception e) {
            logger.warn("Failed to get GitHub username via gh", e)
        }
    }
    println("GitHub username: ${user ?: 'not found'}")
    return user ?: ""
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/ERP-Modula/common-lib")
        credentials {
            username = getGithubUser()
            password = getGithubToken()
        }
    }
}

dependencies {
    // Core Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.4'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.2.1'
    //implementation 'org.liquibase:liquibase-core'

    // External libs
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.5-alpha1'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'

    // DB
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.h2database:h2'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // MapStruct processor
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // Internal libs
    implementation 'com.modula:common-lib:1.0.54'

    // Test
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.mockito:mockito-core'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
